#include<stdio.h> 
#include<stdlib.h>

struct Pilha {

	int topo; 
	int capa;
	int *e;

};

void criarpilha( struct Pilha *p, int c ){

   p->topo = -1;
   p->capa = c;
   p->e = (int*) malloc (c * sizeof(int));
}

int estavazia ( struct Pilha *p ){

   if( p-> topo == -1 )

      return 1;   

   else

      return 0;   

}

int estacheia ( struct Pilha *p ){

	if (p->topo == p->capa - 1)

		return 1;

	else

		return 0;

}

void empilhar ( struct Pilha *p, int v){

	p->topo++;
	p->e [p->topo] = v;

}

int desempilhar ( struct Pilha *p ){

   int a = p->e [p->topo];
   p->topo--;
   return a;

}
void imprimir(struct Pilha *p){
	if( p-> topo == -1 )
	printf("A Pilha está vazia!\n");
	else{
		while(p-> topo != -1){
			printf("Valor: %p \n", p->e);
            p->topo--;

		}
	}
}
void limparpilha(struct Pilha *p){
	
		while(p-> topo != -1){
			free (p-> topo);
            p->topo--;

		}
}

int retornatopo ( struct Pilha *p ){

   return p->e [p->topo];

}





struct Fila {

	int tamanho;
	int *dados;
	int primeiro;
	int ultimo;
	int quantidade; 

};

void criarFila( struct Fila *a, int c ) { 

	a->tamanho = c;
	a->dados = (int*) malloc (a->tamanho * sizeof(int));
	a->primeiro = 0;
	a->ultimo = -1;
	a->quantidade = 0; 

}

void inserir(struct Fila *a, int v) {

	if(a->ultimo == a->tamanho-1)
		a->ultimo = -1;

	a->ultimo++;
	a->dados[a->ultimo] = v; 
	a->quantidade++; 

}

int Cheia( struct Fila *a ) { 

	return (a->quantidade == a->tamanho);
}

int remover( struct Fila *a ) {

	int temp = a->dados[a->primeiro++];

	if(a->primeiro == a->tamanho)
		a->primeiro = 0;

	a->quantidade--;
	return temp;

}

int Vazia( struct Fila *a ) {

	return (a->quantidade==0);

}

void imprimirfila(struct Fila *a){

	int c, i;

	for ( c=0, i= a->primeiro; c < a->quantidade; c++){

		printf("%d",a->dados[i++]);

		if (i == a->tamanho)
			i=0;

	}
	printf("\n\n");

}

void limparfila(struct Fila *a){

while(a-> quantidade !=NULL){
			free (a-> dados);
            a-> quantidade--;
	
	}
}

int maiorfila(struct Fila *a){

	int maior, i;
	maior=0;
	for (i=0;i<a->tamanho;i++){

	        if(a->dados[i]>maior){
                    maior=a->dados[i];
	        }           

	}
	printf("O maior valor é:%d", maior);

}

int menorfila(struct Fila *a){

	int menor, i;
	menor=0;
	for (i=0;i<a->tamanho;i++){

	        if(a->dados[i]<menor){
                    menor=a->dados[i];
	        }           

	}
	printf("O menor valor é:%d", menor);

}





struct No{
    int numeros;
    struct No *esquerda;
    struct No *direita
};
typedef struct No No; 

void criararvore(No **pRaiz){
    *pRaiz=NULL;
}

void insertarvore (No **pRaiz, int n2){
    if (*pRaiz==NULL){
        *pRaiz = (No*)malloc(sizeof(No));
        (*pRaiz)->esquerda = NULL;
        (*pRaiz)->direita = NULL;
        (*pRaiz)->numeros = n2;
    }
    else{
        if (n2<(*pRaiz)->numeros){
            insertarvore(&((*pRaiz)->esquerda),n2);
        }
    else{
        insertarvore(&((*pRaiz)->direita),n2);
    }
        
    }
}

No *MaiorDireita(No **no)
{
    if((*no)->direita != NULL)
    {
       return MaiorDireita(&(*no)->direita);
    }
    else
    {
       No *aux = *no;
       
       if((*no)->esquerda != NULL) 
        {
          *no = (*no)->esquerda;
        }
        else
        {
            *no = NULL;
            return aux;
        }
    }
        
}

No *MenorEsquerda(No **no)
{
    if((*no)->esquerda != NULL)
    {
       return MenorEsquerda(&(*no)->esquerda);
    }
    else
    {
        No *aux = *no; 
        if((*no)->direita != NULL) 
        {
          *no = (*no)->direita;
        }
        else
        {
          *no = NULL;
        }
        return aux;
    }
}

void remover(No **pRaiz){
    if(*pRaiz == NULL){   
       printf("Numero nao existe na arvore!");
       getch();
       return;
    }
    if(numeros < (*pRaiz)->numeros)
       remover(&(*pRaiz)->esquerda, numeros);
    else 
       if(numero > (*pRaiz)->numeros)
          remover(&(*pRaiz)->direita, numeros);
       else{
          No *pAux = *pRaiz;    
          if (((*pRaiz)->esquerda == NULL) && ((*pRaiz)->direita == NULL)){ 
                free(pAux);
                (*pRaiz) = NULL; 
               }
          else{    
             if ((*pRaiz)->esquerda == NULL){
                (*pRaiz) = (*pRaiz)->direita;
                pAux->direita = NULL;
                free(pAux); pAux = NULL;
                }
             else{ 
                if ((*pRaiz)->direita == NULL){
                    (*pRaiz) = (*pRaiz)->esquerda;
                    pAux->esquerda = NULL;
                    free(pAux); pAux = NULL;
                    }
                else{   
                   pAux = MaiorDireita(&(*pRaiz)->esquerda); 
                   pAux->esquerda = (*pRaiz)->esquerda;         
                   pAux->direita = (*pRaiz)->direita;
                   (*pRaiz)->esquerda = (*pRaiz)->direita = NULL;
                   free((*pRaiz));  *pRaiz = pAux;  pAux = NULL;   
                   }
                }
             }
          }
}

void exibirEmOrdem(No *pRaiz){
    if(pRaiz != NULL){
        exibirEmOrdem(pRaiz->esquerda);
        printf("\n%i", pRaiz->numeros);
        exibirEmOrdem(pRaiz->direita);
    }
}

int contarNos(No *pRaiz){
   if(pRaiz == NULL)
        return 0;
   else
        return 1 + contarNos(pRaiz->esquerda) + contarNos(pRaiz->direita);
}

int contarFolhas(No *pRaiz){
   if(pRaiz == NULL)
        return 0;
   if(pRaiz->esquerda == NULL && pRaiz->direita == NULL)
        return 1;
   return contarFolhas(pRaiz->esquerda) + contarFolhas(pRaiz->direita);
}

int maior(int a, int b){
    if(a > b)
        return a;
    else
        return b;
}//maior



int altura(No *pRaiz){
   if((pRaiz == NULL) || (pRaiz->esquerda == NULL && pRaiz->direita == NULL))
       return 0;
   else
       return 1 + maior(altura(pRaiz->esquerda), altura(pRaiz->direita));
}

typedef int bool;
#define false 0;
#define true 1;

bool achar(int element) 
{

 
    No* temp = root;
    int parar=0;

    if(root==NULL){
      return false;
    }else if(temp->esquerda== NULL && temp->direita==NULL){
      if(temp->valor == element){
        return true;
      }else{
        return false;
      }
    }else if(temp->valor==element){
      return true;
    }else{
    while(parar==0){
      if(temp->valor < element){
        if(temp->esquerda == NULL){
          parar++;
          if (temp->valor==element){
            break;
            return true;
          }else{
          return false;
          }
        }else{
          temp=temp->direita;
          if (temp->valor== element){
            return true;
            break;
          }
        }

      }else if(temp->value > element){
        if(temp->right== NULL){
          parar++;
          if (temp->value==element){
            return true;
            break;
          }else{
          return false;
          }
        }else{
          temp=temp->left;
          if (temp->value== element){
            return true;
            break;
          }
        }
      }
    }
  }
}


int main(){
    int n;
    printf("\nEscolha uma das opções abaixo:\n");
    printf("\n1-Para escolher Pilha:\n ");
    printf("\n2-Para escolher Fila:\n ");
    printf("\n3-Para escolher Árvore:\n ");
    scanf("%d", &n);
    switch(n){
	    case 1:
	    struct Pilha annie;
	    int c, o, v;
	    printf( "\nQual o tamanho da pilha?" );
    	scanf( "%d", &c);
    	criarpilha (&annie, c);
    	
    	printf("\n1- empilhar\n");
		printf("2- desempilhar \n");
		printf("3- imprimir \n");
		printf("4- limpar \n");
		printf("5- Mostrar o topo \n");
		printf("6- sair\n");
		scanf("%d", &o);
		switch(o){
		    case 1: 

				if( estacheia( &annie ) == 1 )

					printf("\nCHEIA!\n");

				else {

					printf("\nDigite um valor para empilhar: ");
					scanf("%d", &v);
					empilhar (&annie, v);

				}
				break;

			case 2: 
				if ( estavazia(&annie) == 1 )

					printf( "\nPILHA VAZIA! \n" );

				else{

					v= desempilhar (&annie);
					printf ( "\n%d DESEMPILHADO!\n", v );

				}
			break;
	        case 3: 
	         if ( estavazia (&annie) == 1 )

					printf( "\nPILHA VAZIA!\n" );

				else {
	    printf("Imprimindo...\n");
				imprimir(&annie);
}
				break;
	        case 4:
	         if ( estavazia (&annie) == 1 )

					printf( "\nPILHA VAZIA!\n" );

				else {
	            limparpilha(&annie);
				}
	        break;     
    	    case 5:
                if ( estavazia (&annie) == 1 )

					printf( "\nPILHA VAZIA!\n" );

				else {

					v = retornatopo (&annie);
					printf ( "\nTOPO: %d", v );

				}
				break;
			case 6:
			    exit(0);
		break;
		}
		case 2:
		    int u, k, z;
        	struct Fila annie2;
            printf("\nQual o tamanho da fila? ");
	        scanf("%d",&k);
	        criarFila(&annie2, k);
	        
	        printf("\n1- enfileirar\n");
		    printf("2- desenfileirar \n");
	    	printf("3- imprimir \n");
	    	printf("4- limpar \n");
	    	printf("5- Mostrar o maior elemento \n");
	    	printf("6- Mostrar o maior elemento \n");
	    	printf("7- sair\n");
	    	scanf("%d", &u);
	    	switch(u){
		        case 1:
		            if (Cheia(&annie2)){

					printf("\nFila Cheia!!!\n\n");

				}
				else {

					printf("\nQual o valor do elemento? ");
					scanf("%d", &z);
					inserir(&annie2,z);

				}

				break;
				case 2: 
				if (Vazia(&annie2)){

					printf("\nFila vazia!!!\n\n");

				}
				else {

					z = remover(&annie2);
					printf("\n%dremovido com sucesso\n\n", z) ; 

				}
				break;
		        case 3:
					if (Vazia(&annie2)){

						printf("\nFila vazia!!!\n\n");

					}
					else {

						printf("\nConteudo da fila => ");
						imprimirfila(&annie2);

					}
					break;
					case 4:
					if (Vazia(&annie2)){

						printf("\nFila vazia!!!\n\n");

					}
					else {

						limparfila(&annie2);

					}
					break;
		        case 5:
					if (Vazia(&annie2)){

						printf("\nFila vazia!!!\n\n");

					}
					else {

						maiorfila(&annie2);

					}
					break;
					case 6:
					if (Vazia(&annie2)){

						printf("\nFila vazia!!!\n\n");

					}
					else {

						menorfila(&annie2);

					}
					break;
		        case 7:
			        exit(0);
		break;
		}
		case 3:
	    struct no annie3;
	    int b, m, l;
	    printf( "\nQual o tamanho da árvore?" );
    	scanf( "%d", &b);
    	criararvore (&annie3,);
    	
    	printf("\n1- inserir\n");
		printf("2- retirar \n");
		printf("3- contar nos \n");
		printf("4- contar folhas \n");
		printf("5- Altura da arvore \n");
		printf("6- buscar na arvore \n");
		printf("7- sair\n");
		scanf("%d", &m);
		switch(m){
		    case 1:
		    printf("\nQual o valor do elemento? ");
					scanf("%d", &l);
		    insertarvore (&annie3, l);
		    break;
		    case 2: 
		    remover (&annie3);
		    break;
		    case 3:
		    contarNos (&annie3);
		    break;
		    case 4:
		    contarFolhas (&annie3);
		    break;
		    case 5:
		    altura (&annie3);
		    break;
		    case 6:
		    printf("\nQual o valor do elemento que você deseja encontrar? ");
					scanf("%d", &l);
		    achar (l);
		    break;
		    case 7:
			        exit(0);
		break;
		}
}
}
